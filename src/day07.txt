use std::{collections::HashMap, fmt::Display};
use std::hash::{Hash, Hasher};

type Treeid = usize;

enum Storage {
    File(StorageFile),
    Directory(StorageDirectory)
}
struct StorageFile{
    size: u32,
    name: String
}

struct StorageDirectory{
    size: u32,
    name: String,
    children: Vec<Storage>
}

struct Tree {
    storage: Vec<Storage>
}

#[derive(Debug, PartialEq)]
enum Output{
    CDRoot,
    CDBack,
    CDSubdir(String),
    LS,
    Directory(String),
    File(String, u32)
}

#[derive(Debug, PartialEq, Eq)]
struct Path {
    path: Vec<String>
}

impl Clone for Path {
    fn clone(&self) -> Self {
        let mut path = vec![];
        for p in &self.path {
            path.push(p.clone());
        }
        return Path {path};
    }
}

impl ToString for Path {
    fn to_string(&self) -> String {
        let mut str = String::new();
        for p in &self.path {
            str.push_str(p.as_str());
            str.push('/');
        }
        return str;
    }
}

impl Output {
    fn lex(input: String) -> Output {
        if !input.starts_with('$') {
            let space_pos = input.find(' ').unwrap();
            let name = String::from(&input[space_pos+1..input.len()]);
            if input.as_bytes()[0].is_ascii_digit() {
                let size = input[0..space_pos].parse().unwrap();
                Output::File(name, size)
            } else {
                Output::Directory(name)
            }
        } else if input.eq("$ cd /") {
            Output::CDRoot
        } else if input.eq("$ cd ..") {
            Output::CDBack
        }else if input.eq("$ ls") {
            Output::LS
        } else {
            Output::CDSubdir(String::from(&input[5..input.len()]))
        }
    }
}

impl Tree {
    fn parse(input: Vec<String>) -> Vec<(Path, u32)> {
        let mut files: Vec<(Path, u32)> = vec![];
        let mut pwd = vec![String::from("/")];
        for line in &input {
            let output = Output::lex(line.clone());
            match output {
                Output::CDSubdir(x) => pwd.push(String::from(x)),
                Output::CDBack => {pwd.pop();},
                Output::CDRoot => pwd = vec![String::from("/")],
                Output::File(n, s) => {
                    let mut path = pwd.clone();
                    path.push(String::from(n));
                    let file = (Path{path}, s);
                    files.push(file);
                },
                _ => {}
            }
        }
        return files;
    }
}

impl Path {
    pub fn getParents(&self) -> Vec<Path> {
        let mut parents = vec![];
        let mut tmp = vec![];
        for directory in &self.path {
            tmp.push(directory.clone());
            parents.push(Path{path:tmp.clone()});
        }
        return parents;
    }
}

pub fn solve_1(input: &Vec<String>) -> u32 {
    let parsed_files = Tree::parse(input.clone());
    let paths = generate_parent_map(parsed_files.clone());
    let mut result = 0;

    let mut visited_paths: Vec<Path> = vec![];
    for (path, size) in paths {
        println!("");
        if size <= 100000  {
            let mut already_contained = false;
            for visited_path in &visited_paths {
                let path_str = path.to_string();
                let visited_str = visited_path.to_string();
                if path_str.starts_with(visited_str.as_str()) {
                    already_contained = true;
                    break;
                }
            }
            if already_contained {
                already_contained = false;
                continue
            }
            println!("");
            println!("{}: {}", path.to_string(), size);
            visited_paths.push(path);
            result += size;
        }
    }
    return result;
}

fn generate_parent_map(parsed_files: Vec<(Path, u32)>) -> Vec<(Path, u32)> {
    let mut paths: Vec<(Path, u32)> = vec![];
    for (path, size) in &parsed_files {
        for parent in &path.getParents() {
            if !paths.contains(&(parent.clone(), 0)) {
                paths.push((parent.clone(), 0));
            }
        }
    }
    for (path, size) in &parsed_files {
        for parent in &path.getParents() {
            let idx = paths.iter().position(|x| x.0.eq(parent)).unwrap();
            let (_, old_size) = paths[idx];
            paths[idx] = (parent.clone(), old_size + size);
        }
    }

    paths.sort_by(|(x, _),(y,_)| x.path.len().partial_cmp(&y.path.len()).unwrap());
    return paths;
}

pub fn solve_2(input: &Vec<String>) -> u32 {
todo!()
}

#[cfg(test)]
mod tests {
    use crate::util::*;
    use super::*;

    #[test]
    fn correct_outputs() {
        assert_eq!(Output::LS, Output::lex(String::from("$ ls")));
        assert_eq!(Output::CDRoot, Output::lex(String::from("$ cd /")));
        assert_eq!(Output::CDBack, Output::lex(String::from("$ cd ..")));
        assert_eq!(Output::CDSubdir(String::from("a")), Output::lex(String::from("$ cd a")));
        assert_eq!(Output::Directory(String::from("a")), Output::lex(String::from("dir a")));
        assert_eq!(Output::File(String::from("f"), 29116), Output::lex(String::from("29116 f")));
    }

    #[test]
    fn generate_solution_1_test_input() {
        let input = get_test_input(7);
        let actual = solve_1(&input);
        assert_eq!(95437, actual);
    }

    #[test]
    fn parse_tree() {
        let input = get_test_input(7);
        let actual = Tree::parse(input.clone());
        let expected_last_path: (Path, u32) = (Path{path:vec![String::from("/"), String::from("d"), String::from("k")]}, 7214296);
        assert_eq!(10, actual.len());
        assert_eq!(expected_last_path, *actual.last().unwrap());
    }

    #[test]
    fn path_equals() {
        let a = Path{path:vec![String::from("/")]};
        let b = Path{path:vec![String::from("/")]};
        assert_eq!(a, b);
    }

}